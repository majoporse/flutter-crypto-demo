// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/native_add.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class NativeAddBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeAddBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeAddBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  int encrypt(
    ffi.Pointer<ffi.UnsignedChar> plaintext,
    int plaintext_len,
    ffi.Pointer<ffi.UnsignedChar> ciphertext,
  ) {
    return _encrypt(plaintext, plaintext_len, ciphertext);
  }

  late final _encryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
            ffi.Pointer<ffi.UnsignedChar>,
          )
        >
      >('encrypt');
  late final _encrypt = _encryptPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
        )
      >();

  int decrypt(
    ffi.Pointer<ffi.UnsignedChar> ciphertext,
    int ciphertext_len,
    ffi.Pointer<ffi.UnsignedChar> plaintext,
  ) {
    return _decrypt(ciphertext, ciphertext_len, plaintext);
  }

  late final _decryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
            ffi.Pointer<ffi.UnsignedChar>,
          )
        >
      >('decrypt');
  late final _decrypt = _decryptPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
        )
      >();
}
